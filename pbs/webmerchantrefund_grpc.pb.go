// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebMerchantRefundServiceClient is the client API for WebMerchantRefundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebMerchantRefundServiceClient interface {
	GetRequestRefund(ctx context.Context, in *GetRequestRefundRequest, opts ...grpc.CallOption) (*GetRequestRefundResponse, error)
	PostRequestRefund(ctx context.Context, in *PostRequestRefundRequest, opts ...grpc.CallOption) (*PostRequestRefundResponse, error)
	GetRefunds(ctx context.Context, in *GetRefundsRequest, opts ...grpc.CallOption) (WebMerchantRefundService_GetRefundsClient, error)
	ReadRefund(ctx context.Context, in *ReadRefundRequest, opts ...grpc.CallOption) (*ReadRefundResponse, error)
}

type webMerchantRefundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebMerchantRefundServiceClient(cc grpc.ClientConnInterface) WebMerchantRefundServiceClient {
	return &webMerchantRefundServiceClient{cc}
}

func (c *webMerchantRefundServiceClient) GetRequestRefund(ctx context.Context, in *GetRequestRefundRequest, opts ...grpc.CallOption) (*GetRequestRefundResponse, error) {
	out := new(GetRequestRefundResponse)
	err := c.cc.Invoke(ctx, "/webmerchantrefund.WebMerchantRefundService/GetRequestRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webMerchantRefundServiceClient) PostRequestRefund(ctx context.Context, in *PostRequestRefundRequest, opts ...grpc.CallOption) (*PostRequestRefundResponse, error) {
	out := new(PostRequestRefundResponse)
	err := c.cc.Invoke(ctx, "/webmerchantrefund.WebMerchantRefundService/PostRequestRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webMerchantRefundServiceClient) GetRefunds(ctx context.Context, in *GetRefundsRequest, opts ...grpc.CallOption) (WebMerchantRefundService_GetRefundsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebMerchantRefundService_ServiceDesc.Streams[0], "/webmerchantrefund.WebMerchantRefundService/GetRefunds", opts...)
	if err != nil {
		return nil, err
	}
	x := &webMerchantRefundServiceGetRefundsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebMerchantRefundService_GetRefundsClient interface {
	Recv() (*GetRefundsResponse, error)
	grpc.ClientStream
}

type webMerchantRefundServiceGetRefundsClient struct {
	grpc.ClientStream
}

func (x *webMerchantRefundServiceGetRefundsClient) Recv() (*GetRefundsResponse, error) {
	m := new(GetRefundsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webMerchantRefundServiceClient) ReadRefund(ctx context.Context, in *ReadRefundRequest, opts ...grpc.CallOption) (*ReadRefundResponse, error) {
	out := new(ReadRefundResponse)
	err := c.cc.Invoke(ctx, "/webmerchantrefund.WebMerchantRefundService/ReadRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebMerchantRefundServiceServer is the server API for WebMerchantRefundService service.
// All implementations must embed UnimplementedWebMerchantRefundServiceServer
// for forward compatibility
type WebMerchantRefundServiceServer interface {
	GetRequestRefund(context.Context, *GetRequestRefundRequest) (*GetRequestRefundResponse, error)
	PostRequestRefund(context.Context, *PostRequestRefundRequest) (*PostRequestRefundResponse, error)
	GetRefunds(*GetRefundsRequest, WebMerchantRefundService_GetRefundsServer) error
	ReadRefund(context.Context, *ReadRefundRequest) (*ReadRefundResponse, error)
	mustEmbedUnimplementedWebMerchantRefundServiceServer()
}

// UnimplementedWebMerchantRefundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebMerchantRefundServiceServer struct {
}

func (UnimplementedWebMerchantRefundServiceServer) GetRequestRefund(context.Context, *GetRequestRefundRequest) (*GetRequestRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestRefund not implemented")
}
func (UnimplementedWebMerchantRefundServiceServer) PostRequestRefund(context.Context, *PostRequestRefundRequest) (*PostRequestRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRequestRefund not implemented")
}
func (UnimplementedWebMerchantRefundServiceServer) GetRefunds(*GetRefundsRequest, WebMerchantRefundService_GetRefundsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRefunds not implemented")
}
func (UnimplementedWebMerchantRefundServiceServer) ReadRefund(context.Context, *ReadRefundRequest) (*ReadRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRefund not implemented")
}
func (UnimplementedWebMerchantRefundServiceServer) mustEmbedUnimplementedWebMerchantRefundServiceServer() {
}

// UnsafeWebMerchantRefundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebMerchantRefundServiceServer will
// result in compilation errors.
type UnsafeWebMerchantRefundServiceServer interface {
	mustEmbedUnimplementedWebMerchantRefundServiceServer()
}

func RegisterWebMerchantRefundServiceServer(s grpc.ServiceRegistrar, srv WebMerchantRefundServiceServer) {
	s.RegisterService(&WebMerchantRefundService_ServiceDesc, srv)
}

func _WebMerchantRefundService_GetRequestRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebMerchantRefundServiceServer).GetRequestRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webmerchantrefund.WebMerchantRefundService/GetRequestRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebMerchantRefundServiceServer).GetRequestRefund(ctx, req.(*GetRequestRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebMerchantRefundService_PostRequestRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebMerchantRefundServiceServer).PostRequestRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webmerchantrefund.WebMerchantRefundService/PostRequestRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebMerchantRefundServiceServer).PostRequestRefund(ctx, req.(*PostRequestRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebMerchantRefundService_GetRefunds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRefundsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebMerchantRefundServiceServer).GetRefunds(m, &webMerchantRefundServiceGetRefundsServer{stream})
}

type WebMerchantRefundService_GetRefundsServer interface {
	Send(*GetRefundsResponse) error
	grpc.ServerStream
}

type webMerchantRefundServiceGetRefundsServer struct {
	grpc.ServerStream
}

func (x *webMerchantRefundServiceGetRefundsServer) Send(m *GetRefundsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WebMerchantRefundService_ReadRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebMerchantRefundServiceServer).ReadRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webmerchantrefund.WebMerchantRefundService/ReadRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebMerchantRefundServiceServer).ReadRefund(ctx, req.(*ReadRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebMerchantRefundService_ServiceDesc is the grpc.ServiceDesc for WebMerchantRefundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebMerchantRefundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webmerchantrefund.WebMerchantRefundService",
	HandlerType: (*WebMerchantRefundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRequestRefund",
			Handler:    _WebMerchantRefundService_GetRequestRefund_Handler,
		},
		{
			MethodName: "PostRequestRefund",
			Handler:    _WebMerchantRefundService_PostRequestRefund_Handler,
		},
		{
			MethodName: "ReadRefund",
			Handler:    _WebMerchantRefundService_ReadRefund_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRefunds",
			Handler:       _WebMerchantRefundService_GetRefunds_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pbs/webmerchantrefund.proto",
}
